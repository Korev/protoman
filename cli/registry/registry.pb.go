// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

/*
Package registry is a generated protocol buffer package.

It is generated from these files:
	registry.proto

It has these top-level messages:
	PublishSchemaRequest
	PublishSchemaResponse
	ProtoFile
*/
package registry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublishSchemaRequest struct {
	ProtoFile []*ProtoFile `protobuf:"bytes,1,rep,name=proto_file,json=protoFile" json:"proto_file,omitempty"`
}

func (m *PublishSchemaRequest) Reset()                    { *m = PublishSchemaRequest{} }
func (m *PublishSchemaRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishSchemaRequest) ProtoMessage()               {}
func (*PublishSchemaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PublishSchemaRequest) GetProtoFile() []*ProtoFile {
	if m != nil {
		return m.ProtoFile
	}
	return nil
}

type PublishSchemaResponse struct {
}

func (m *PublishSchemaResponse) Reset()                    { *m = PublishSchemaResponse{} }
func (m *PublishSchemaResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishSchemaResponse) ProtoMessage()               {}
func (*PublishSchemaResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ProtoFile struct {
	Path    string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *ProtoFile) Reset()                    { *m = ProtoFile{} }
func (m *ProtoFile) String() string            { return proto.CompactTextString(m) }
func (*ProtoFile) ProtoMessage()               {}
func (*ProtoFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProtoFile) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ProtoFile) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishSchemaRequest)(nil), "spotify.protoman.PublishSchemaRequest")
	proto.RegisterType((*PublishSchemaResponse)(nil), "spotify.protoman.PublishSchemaResponse")
	proto.RegisterType((*ProtoFile)(nil), "spotify.protoman.ProtoFile")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SchemaRegistry service

type SchemaRegistryClient interface {
	PublishSchema(ctx context.Context, in *PublishSchemaRequest, opts ...grpc.CallOption) (*PublishSchemaResponse, error)
}

type schemaRegistryClient struct {
	cc *grpc.ClientConn
}

func NewSchemaRegistryClient(cc *grpc.ClientConn) SchemaRegistryClient {
	return &schemaRegistryClient{cc}
}

func (c *schemaRegistryClient) PublishSchema(ctx context.Context, in *PublishSchemaRequest, opts ...grpc.CallOption) (*PublishSchemaResponse, error) {
	out := new(PublishSchemaResponse)
	err := grpc.Invoke(ctx, "/spotify.protoman.SchemaRegistry/PublishSchema", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SchemaRegistry service

type SchemaRegistryServer interface {
	PublishSchema(context.Context, *PublishSchemaRequest) (*PublishSchemaResponse, error)
}

func RegisterSchemaRegistryServer(s *grpc.Server, srv SchemaRegistryServer) {
	s.RegisterService(&_SchemaRegistry_serviceDesc, srv)
}

func _SchemaRegistry_PublishSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaRegistryServer).PublishSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spotify.protoman.SchemaRegistry/PublishSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaRegistryServer).PublishSchema(ctx, req.(*PublishSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchemaRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spotify.protoman.SchemaRegistry",
	HandlerType: (*SchemaRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishSchema",
			Handler:    _SchemaRegistry_PublishSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4a, 0x4d, 0xcf,
	0x2c, 0x2e, 0x29, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x28, 0x2e, 0xc8, 0x2f,
	0xc9, 0x4c, 0x83, 0x72, 0x73, 0x13, 0xf3, 0x94, 0x82, 0xb8, 0x44, 0x02, 0x4a, 0x93, 0x72, 0x32,
	0x8b, 0x33, 0x82, 0x93, 0x33, 0x52, 0x73, 0x13, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0xac, 0xb8, 0xb8, 0xc0, 0x6a, 0xe2, 0xd3, 0x32, 0x73, 0x52, 0x25, 0x18, 0x15, 0x98, 0x35, 0xb8,
	0x8d, 0xa4, 0xf5, 0xd0, 0xb5, 0xeb, 0x05, 0x80, 0x18, 0x6e, 0x99, 0x39, 0xa9, 0x41, 0x9c, 0x05,
	0x30, 0xa6, 0x92, 0x38, 0x97, 0x28, 0x9a, 0x99, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x4a, 0x96,
	0x5c, 0x9c, 0x70, 0x0d, 0x42, 0x42, 0x5c, 0x2c, 0x05, 0x89, 0x25, 0x19, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x90, 0x04, 0x17, 0x7b, 0x72, 0x7e, 0x5e, 0x49, 0x6a, 0x5e, 0x89,
	0x04, 0x93, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x8c, 0x6b, 0x54, 0xc2, 0xc5, 0x07, 0x33, 0x0c, 0xe2,
	0x23, 0xa1, 0x24, 0x2e, 0x5e, 0x14, 0x5b, 0x84, 0xd4, 0xb0, 0x38, 0x0f, 0x8b, 0xd7, 0xa4, 0xd4,
	0x09, 0xaa, 0x83, 0x3a, 0x97, 0xc1, 0x49, 0x89, 0x4b, 0x24, 0x39, 0x3f, 0x17, 0x43, 0x7d, 0x00,
	0x63, 0x14, 0x07, 0x2c, 0x64, 0x93, 0xd8, 0xc0, 0xa2, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x7e, 0xf7, 0x40, 0xb4, 0x6c, 0x01, 0x00, 0x00,
}
